{# each data item expects the format
##  '<--fieldName-->' => [
##      'value' =>
##      ('collapse') =>
##      ('cellWd') => // cell width calculation uses a 24-col system so whatever number is passed as cellWd will get x/24 * 100%
##      ('href') =>
##  ]
#}

{% macro mapClasslistToCell(cell, cellHeading) %}
    {% if cell is null %}{# classes only for heading #}
        {% set cellWd = (cellHeading.cellWd is empty ? '' : 'table-cell__' ~ cellHeading.cellWd) %}{# cellWd belongs only on heading #}
        {% set collapse = (cellHeading.collapse is empty ? '' : 'collapse-' ~ cellHeading.collapse) %}
        {% set classList = ((cellWd) ~ (collapse is empty ? '' : ' ' ~ collapse)) %}
    {% elseif not cellHeading is null %}{# classes inherited by cell from heading #}
        {% set collapse = (cellHeading.collapse is empty ? '' : 'collapse-' ~ cellHeading.collapse) %}
        {% set classList = ((cellHeading.classList is empty ? '' : cellHeading.classList ~ ' ') ~ collapse) %}
    {% else %}{# cell has its own class list #}
        {% set collapse = (cell.collapse is empty ? '' : 'collapse-' ~ cell.collapse) %}
        {% set classList = ((cell.classList is empty ? '' : cell.classList ~ ' greenman! ') ~ collapse) %}
    {% endif %}
    {{- classList -}}
{% endmacro %}

{# CREATETABLE OUGHT TO ALSO HANDLE:
##   • mapping of collapse classes from headings to cells
##   • appending of ID to href's
#}
{% macro createTable(data, headings, tableProps) %}
    {% import _self as tables %}
    {% set classList = "table table-layout-fixed table-striped"
        ~ (tableProps.classList is empty ? '' : (' ' ~ tableProps.classList))
    %}
    <table class='{{ classList }}'>
        <thead>
            <tr class="bg-dark-blue text-white">
                {{ tables.createHeadings(headings) }}
            </tr>
        </thead>
        <tbody>
        {% if not data is empty %}
            {% for row in data %}
                {{ tables.createRow(row, headings) }}
            {% endfor %}
        {% else %}
            <tr><td colspan="{{ headings | length }}"><h4 class="text-secondary text-center">No data to display</h4></td></tr>
        {% endif %}
        </tbody>
    </table>
{% endmacro %}

{% macro createHeadings(headings) %}
    {% import _self as tables %}
    {% for heading in headings %}
        {% if not heading is iterable %}
            <th scope="col">{{ heading }}</th>
        {% else %}
            {{ tables.createHeadingFromArray(heading) }}
        {% endif %}
    {% endfor %}
{% endmacro%}

{% macro createHeadingFromArray(array) %}
    {% import _self as tables %}
    {% set cellWd = array.cellWd is empty ? '' : 'table-cell__' ~ array.cellWd %}
    {% set collapse = array.collapse is empty ? '' : 'collapse-' ~ array.collapse %}
    {% set classList = cellWd ~ (collapse is empty ? '' : ' ' ~ collapse) %}
    <th
        scope='col'
        class='{{ tables.mapClasslistToCell(null, array) | trim }}'
        {# style='{{ cellWd }}' #}
    >{{ array.value }}</th>
{% endmacro %}

{% macro createRow(row, headings) %}
    {% import _self as tables %}
    {# id field must exist and must be named 'ID' #}
    {% set equalSign = '=' %}
    {% set id %}
        {% if not row.ID is empty %}
            {{ row.ID is iterable ? row.ID.value|trim : row.ID|trim }}
        {% else %}{% endif %}
    {% endset %}
    <tr>
        {# iterate over data row, rendering data in tr's
        data may or may not be attached to array describing visual table structure #}
        {% for fieldName, cell in row %}
            {# initialize href to empty at the start of each each iteration #}
            {% set href = false %}

            {# check for href on current cell #}
            {% if not cell.href is empty %}
                {# if href on cell, concat cell.href + id #}
                {% set href = not cell.href|trim|last is same as(equalSign) ? cell.href|trim : cell.href|trim ~ id %}
            {% elseif not headings[fieldName].href is empty %}
                {# if href on heading, concat heading.href + id #}
                {% set href = not headings[fieldName].href|trim|last is same as(equalSign)
                    ? headings[fieldName].href|trim
                    : headings[fieldName].href|trim ~ id|trim %}
            {% else %}{% endif %}
            
            {% if not cell is iterable %}
                {# if cell is simple scalar then check for href, classes on heading for cell #}
                {% set collapse = headings[fieldName].collapse is empty ? '' : 'collapse-' ~ headings[fieldName].collapse %}
                {% set classList = (headings[fieldName].classList is empty ? '' : headings[fieldName].classList ~ ' greenman! ') ~ collapse %}
                {% set cellContent %}
                    {% if not href is empty %}
                        {{ tables.anchorTag(href, id | trim) }}
                    {% elseif not cell is empty %}
                        {{ cell | trim | raw | nl2br }}
                    {% else %}
                        {{ '—' }}
                    {% endif %}
                {% endset %}
                <td class="{{ tables.mapClasslistToCell(cell, headings[fieldName]) | trim }}">{{- cellContent -}}</td>
                
            {% else %}
                {# cell is iteratable
                    headings and row keys must match #}
                {{ tables.createCellFromArray(cell, headings[fieldName]) }}
            {% endif %}
        {% endfor %}
        {# after iterating over row fields, add any [cell] that is on headings[] but not on row[]
            e.g., edit, delete #}
        {% for fieldName, heading in headings if fieldName not in (row | keys) %}
            {% if fieldName is same as("edit") %}
                {% set href = not headings[fieldName].href|trim|last is same as(equalSign)
                    ? headings[fieldName].href|trim
                    : headings[fieldName].href|trim ~ id|trim %}
                {% set cellContent = tables.editButton(href|trim) %}
            {% elseif fieldName is same as("delete") %}
                {# delete button template here #}
            {% endif %}
            {% set collapse = heading.collapse is empty ? '' : 'RedMan collapse-' ~ heading.collapse %}
            {% set classList = (heading.classList is empty ? '' : heading.classList ~ ' ') ~ collapse %}
            <td class="{{ tables.mapClasslistToCell(null, heading) | trim }}">{{- cellContent -}}</td>
        {% endfor %}
    </tr>
{% endmacro %}

{% macro createCellFromArray(field, heading) %}
    {% import _self as tables %}
    {% set cellContent %}
        {% set collapse = field.collapse is empty ? '' : ('collapse-' ~ field.collapse) %}
        {% set classList = ((field.classList is empty ? '' : field.classList ~ ' ') ~ collapse) %}
        {% if not field.href is empty %}
            {{ tables.anchorTag(field.href, field.value) }}
        {% elseif not heading.href is empty %}
            {% if heading.value is same as ('Edit') %}
                {{ tables.editButton(href) }}
            {% else %}
                {{ tables.anchorTag(heading.href, field.value) }}
            {% endif %}
        {% else %} {{ field.value }}
        {% endif %}
    {% endset %}
    {% set cellAttrs = classList is empty ? '' : 'class=' ~ classList %}
    <td {{ cellAttrs }}>{{ cellContent }}</td>
{% endmacro %}

{% macro anchorTag(href, text) %}
    <a href='{{- href|trim -}}'>{{ text }}</a>
{% endmacro %}

{% macro editButton(href) %}
    <a href='{{ href|trim }}' class='btn btn-outline edit-btn-sm' target="_blank"><i class="typcn typcn-edit"></i></a>
{% endmacro %}
